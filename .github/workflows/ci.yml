name: CI Pipeline (Disabled)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  # Job de préparation et cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

  # Validation TypeScript en parallèle
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: TypeScript type check
        run: npx tsc --noEmit --skipLibCheck

  # Linting en parallèle
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Run ESLint
        run: npm run lint

  # Tests en parallèle
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Run tests
        run: npm test -- --reporter=verbose --run

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          fail_ci_if_error: false

  # Build et validation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Build application
        run: npm run build

      - name: Check build size
        run: |
          echo "### Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Validation d'environnement
  env-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Validate environment variables
        run: npm run validate-env

  # Job final qui attend tous les autres
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [typecheck, lint, test, build, env-validation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.typecheck.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.env-validation.result }}" == "success" ]]; then
            echo "✅ All quality checks passed!"
            echo "### Quality Gate: PASSED ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some quality checks failed!"
            echo "### Quality Gate: FAILED ❌" >> $GITHUB_STEP_SUMMARY
            echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| TypeScript | ${{ needs.typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| ESLint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Environment | ${{ needs.env-validation.result }} |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi